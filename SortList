public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: You should return the head of the sorted linked list,
                    using constant space complexity.
     */
    public ListNode sortList(ListNode head) {  
        // write your code here
        if(head == null || head.next == null)
            return head;
        ListNode prev = findMidPrev(head);
        ListNode head2 = sortList(prev.next);
        prev.next = null;
        ListNode head1 = sortList(head);
        return mergeList(head1, head2);
    }
    
    private ListNode findMidPrev(ListNode head){
        if(head == null)
            return head;
        ListNode fast = head, slow = head;
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    
    private ListNode mergeList(ListNode head1, ListNode head2){
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        while(head1 != null && head2 != null){
            if(head1.val < head2.val){
                head.next = head1;
                head1 = head1.next;
                head = head.next;
            }else{
                head.next = head2;
                head2 = head2.next;
                head = head.next;
            }
        }
        if(head1 == null){
            head.next = head2;
        }else{
            head.next = head1;
        }
        return dummy.next;
    }
}
